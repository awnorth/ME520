%{
ME 520 Filtering Assignment - Andrew north - Due 9/23/2021
%}
%[data,Fs] = audioread('zoo_LP_5100.wav');
Fs = 11025
% sound(data,Fs);
% Fs = sampling frequency 11,025 Hz
T = 1/Fs;       % T is the sampling period = 0.0000907 seconds = 0.09 ms
L = length(data);
t = (0:L-1)*T;  % Sets x-axis
SampleTime = T*L;   % Length of zoo.wav in seconds

plot(t,data);
title('Raw Audio Signal');
xlabel('time (seconds)');
ylabel('data');

% Fast Fourier Transofrm!
Y = fft(data_LP);

P2 = abs(Y/L);
P1 = P2(1:L/2+1);
P1(2:end-1) = 2*P1(2:end-1);

%f = Fs*(0:(L/2))/L;
f = Fs*(0:(L/2))/L;
plot(f,P1) 
title('Amplitude Spectrum of zoo_smoothed.wav');
xlabel('f (Hz)');
ylabel('|P1(f)|');

% ---- Checks for largest magnitude in the fft output ---- %
M = max(P1);
i = find(P1 == M);      % determines index of largest output
dominantFreq = f(i);    % determine dominant frequency at index of largest fft output mag.

% ---- Removes largest magnitude value and all values +/- 10 samples away. Setting all to 0
%{
P1_updated = P1;
for num = -10:10
    P1_updated(i+num) = 0;
end
plot(f,P1_updated);
%}


% ----- Save new sound wave file after filtering ----- %

sound(y,Fs);
filename = 'zoo_LP_75_smoothing.wav';
audiowrite(filename,y,Fs);



% ----- Creating and implementing a lowpass filter at 4300Hz ----- %
%{
F_LP_4300 = Filter_lowpass_4300;
y = filter(F_LP_4300,data);

% Save filtered .wav file
sound(y,Fs);
filename = 'zoo_LP_4300.wav';
audiowrite(filename,y,Fs);
%}
%{
To Save new clip from 5.8 - 6.17 seconds
%}
%{
filename = 'zoo_LP_5100.wav';
[y,Fs]= audioread(filename);
y = y(5.8*Fs:6.17*Fs);
audiowrite('zoo_end.wav',y,Fs);
%}
% --- Removes end of audio file
%{
filename = 'zoo_LP_5100.wav';
[z,Fs]=audioread(filename);
samples=[1,length(z)-(4*Fs)];
[z1,Fs] = audioread(filename,samples);
audiowrite('zoo_end.wav',z1,Fs);
%}

% LP 4300Hz Butterworth Filter I created using Filter Designer
function Hd = Filter_lowpass_4300
%FILTER_LOWPASS_4300 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.10 and Signal Processing Toolbox 8.6.
% Generated on: 22-Sep-2021 16:07:52

% Butterworth Lowpass filter designed using FDESIGN.LOWPASS.

% All frequency values are in Hz.
Fs = 11025;  % Sampling Frequency

N  = 7;     % Order
Fc = 4300;  % Cutoff Frequency

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.lowpass('N,F3dB', N, Fc, Fs);
Hd = design(h, 'butter');
end





